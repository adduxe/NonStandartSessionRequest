// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SessionRequestApi.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Submissions.
    /// </summary>
    public static partial class SubmissionsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Get(this ISubmissions operations)
            {
                return operations.GetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this ISubmissions operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetPending(this ISubmissions operations)
            {
                return operations.GetPendingAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPendingAsync(this ISubmissions operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPendingWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetApproved(this ISubmissions operations)
            {
                return operations.GetApprovedAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetApprovedAsync(this ISubmissions operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApprovedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetRejected(this ISubmissions operations)
            {
                return operations.GetRejectedAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetRejectedAsync(this ISubmissions operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRejectedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='submissionId'>
            /// </param>
            /// <param name='submissionDTO'>
            /// </param>
            public static object PutBySubmissionIdSubmissionDTO(this ISubmissions operations, int submissionId, Submission submissionDTO)
            {
                return operations.PutBySubmissionIdSubmissionDTOAsync(submissionId, submissionDTO).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='submissionId'>
            /// </param>
            /// <param name='submissionDTO'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutBySubmissionIdSubmissionDTOAsync(this ISubmissions operations, int submissionId, Submission submissionDTO, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutBySubmissionIdSubmissionDTOWithHttpMessagesAsync(submissionId, submissionDTO, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

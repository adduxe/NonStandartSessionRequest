// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SessionRequestApi.Client.Models
{
    using Newtonsoft.Json;
    using SessionRequestApi.Client;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Xml;
    using System.Xml.Linq;

    public partial class Session
    {
        /// <summary>
        /// Initializes a new instance of the Session class.
        /// </summary>
        public Session()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Session class.
        /// </summary>
        public Session(int? requestId = default(int?), string owningSchool = default(string), string owningDepartment = default(string), string userContact = default(string), string userEmail = default(string), string userPhone = default(string), System.DateTime? firstDayOfClass = default(System.DateTime?), System.DateTime? lastDayOfClass = default(System.DateTime?), System.DateTime? lastDayForAddDrop = default(System.DateTime?), System.DateTime? lastDayForWithdrawal = default(System.DateTime?), System.DateTime? firstDayOfFinals = default(System.DateTime?), System.DateTime? lastDayOfFinals = default(System.DateTime?), System.DateTime? firstDayForFinalGrading = default(System.DateTime?), System.DateTime? lastDayForFinalGrading = default(System.DateTime?), System.DateTime? lastDayForEnrollmentOptionChange = default(System.DateTime?), bool? isClassHeldAtUpc = default(bool?), string uscCampusLocation = default(string), string otherCampusLocation = default(string), System.DateTime? sessionBreakStart1 = default(System.DateTime?), System.DateTime? sessionBreakEnd1 = default(System.DateTime?), System.DateTime? sessionBreakStart2 = default(System.DateTime?), System.DateTime? sessionBreakEnd2 = default(System.DateTime?), string sessionCode = default(string), string rateType = default(string), double? ratePerUnit = default(double?), double? flatRateAmount = default(double?), int? flatRateUnitsMin = default(int?), int? flatRateUnitsMax = default(int?), System.DateTime? submitDate = default(System.DateTime?), string comments = default(string), IList<Section> sections = default(IList<Section>))
        {
            RequestId = requestId;
            OwningSchool = owningSchool;
            OwningDepartment = owningDepartment;
            UserContact = userContact;
            UserEmail = userEmail;
            UserPhone = userPhone;
            FirstDayOfClass = firstDayOfClass;
            LastDayOfClass = lastDayOfClass;
            LastDayForAddDrop = lastDayForAddDrop;
            LastDayForWithdrawal = lastDayForWithdrawal;
            FirstDayOfFinals = firstDayOfFinals;
            LastDayOfFinals = lastDayOfFinals;
            FirstDayForFinalGrading = firstDayForFinalGrading;
            LastDayForFinalGrading = lastDayForFinalGrading;
            LastDayForEnrollmentOptionChange = lastDayForEnrollmentOptionChange;
            IsClassHeldAtUpc = isClassHeldAtUpc;
            UscCampusLocation = uscCampusLocation;
            OtherCampusLocation = otherCampusLocation;
            SessionBreakStart1 = sessionBreakStart1;
            SessionBreakEnd1 = sessionBreakEnd1;
            SessionBreakStart2 = sessionBreakStart2;
            SessionBreakEnd2 = sessionBreakEnd2;
            SessionCode = sessionCode;
            RateType = rateType;
            RatePerUnit = ratePerUnit;
            FlatRateAmount = flatRateAmount;
            FlatRateUnitsMin = flatRateUnitsMin;
            FlatRateUnitsMax = flatRateUnitsMax;
            SubmitDate = submitDate;
            Comments = comments;
            Sections = sections;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "requestId")]
        public int? RequestId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "owningSchool")]
        public string OwningSchool { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "owningDepartment")]
        public string OwningDepartment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userContact")]
        public string UserContact { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userEmail")]
        public string UserEmail { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userPhone")]
        public string UserPhone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "firstDayOfClass")]
        public System.DateTime? FirstDayOfClass { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastDayOfClass")]
        public System.DateTime? LastDayOfClass { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastDayForAddDrop")]
        public System.DateTime? LastDayForAddDrop { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastDayForWithdrawal")]
        public System.DateTime? LastDayForWithdrawal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "firstDayOfFinals")]
        public System.DateTime? FirstDayOfFinals { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastDayOfFinals")]
        public System.DateTime? LastDayOfFinals { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "firstDayForFinalGrading")]
        public System.DateTime? FirstDayForFinalGrading { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastDayForFinalGrading")]
        public System.DateTime? LastDayForFinalGrading { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastDayForEnrollmentOptionChange")]
        public System.DateTime? LastDayForEnrollmentOptionChange { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isClassHeldAtUpc")]
        public bool? IsClassHeldAtUpc { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uscCampusLocation")]
        public string UscCampusLocation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "otherCampusLocation")]
        public string OtherCampusLocation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sessionBreakStart1")]
        public System.DateTime? SessionBreakStart1 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sessionBreakEnd1")]
        public System.DateTime? SessionBreakEnd1 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sessionBreakStart2")]
        public System.DateTime? SessionBreakStart2 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sessionBreakEnd2")]
        public System.DateTime? SessionBreakEnd2 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sessionCode")]
        public string SessionCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rateType")]
        public string RateType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ratePerUnit")]
        public double? RatePerUnit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "flatRateAmount")]
        public double? FlatRateAmount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "flatRateUnitsMin")]
        public int? FlatRateUnitsMin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "flatRateUnitsMax")]
        public int? FlatRateUnitsMax { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "submitDate")]
        public System.DateTime? SubmitDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "comments")]
        public string Comments { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sections")]
        public IList<Section> Sections { get; set; }

        /// <summary>
        /// Serializes the object to an XML node
        /// </summary>
        internal XElement XmlSerialize(XElement result)
        {
            if( null != RequestId )
            {
                result.Add(new XElement("requestId", RequestId) );
            }
            if( null != OwningSchool )
            {
                result.Add(new XElement("owningSchool", OwningSchool) );
            }
            if( null != OwningDepartment )
            {
                result.Add(new XElement("owningDepartment", OwningDepartment) );
            }
            if( null != UserContact )
            {
                result.Add(new XElement("userContact", UserContact) );
            }
            if( null != UserEmail )
            {
                result.Add(new XElement("userEmail", UserEmail) );
            }
            if( null != UserPhone )
            {
                result.Add(new XElement("userPhone", UserPhone) );
            }
            if( null != FirstDayOfClass )
            {
                result.Add(new XElement("firstDayOfClass", FirstDayOfClass) );
            }
            if( null != LastDayOfClass )
            {
                result.Add(new XElement("lastDayOfClass", LastDayOfClass) );
            }
            if( null != LastDayForAddDrop )
            {
                result.Add(new XElement("lastDayForAddDrop", LastDayForAddDrop) );
            }
            if( null != LastDayForWithdrawal )
            {
                result.Add(new XElement("lastDayForWithdrawal", LastDayForWithdrawal) );
            }
            if( null != FirstDayOfFinals )
            {
                result.Add(new XElement("firstDayOfFinals", FirstDayOfFinals) );
            }
            if( null != LastDayOfFinals )
            {
                result.Add(new XElement("lastDayOfFinals", LastDayOfFinals) );
            }
            if( null != FirstDayForFinalGrading )
            {
                result.Add(new XElement("firstDayForFinalGrading", FirstDayForFinalGrading) );
            }
            if( null != LastDayForFinalGrading )
            {
                result.Add(new XElement("lastDayForFinalGrading", LastDayForFinalGrading) );
            }
            if( null != LastDayForEnrollmentOptionChange )
            {
                result.Add(new XElement("lastDayForEnrollmentOptionChange", LastDayForEnrollmentOptionChange) );
            }
            if( null != IsClassHeldAtUpc )
            {
                result.Add(new XElement("isClassHeldAtUpc", IsClassHeldAtUpc) );
            }
            if( null != UscCampusLocation )
            {
                result.Add(new XElement("uscCampusLocation", UscCampusLocation) );
            }
            if( null != OtherCampusLocation )
            {
                result.Add(new XElement("otherCampusLocation", OtherCampusLocation) );
            }
            if( null != SessionBreakStart1 )
            {
                result.Add(new XElement("sessionBreakStart1", SessionBreakStart1) );
            }
            if( null != SessionBreakEnd1 )
            {
                result.Add(new XElement("sessionBreakEnd1", SessionBreakEnd1) );
            }
            if( null != SessionBreakStart2 )
            {
                result.Add(new XElement("sessionBreakStart2", SessionBreakStart2) );
            }
            if( null != SessionBreakEnd2 )
            {
                result.Add(new XElement("sessionBreakEnd2", SessionBreakEnd2) );
            }
            if( null != SessionCode )
            {
                result.Add(new XElement("sessionCode", SessionCode) );
            }
            if( null != RateType )
            {
                result.Add(new XElement("rateType", RateType) );
            }
            if( null != RatePerUnit )
            {
                result.Add(new XElement("ratePerUnit", RatePerUnit) );
            }
            if( null != FlatRateAmount )
            {
                result.Add(new XElement("flatRateAmount", FlatRateAmount) );
            }
            if( null != FlatRateUnitsMin )
            {
                result.Add(new XElement("flatRateUnitsMin", FlatRateUnitsMin) );
            }
            if( null != FlatRateUnitsMax )
            {
                result.Add(new XElement("flatRateUnitsMax", FlatRateUnitsMax) );
            }
            if( null != SubmitDate )
            {
                result.Add(new XElement("submitDate", SubmitDate) );
            }
            if( null != Comments )
            {
                result.Add(new XElement("comments", Comments) );
            }
            if( null != Sections )
            {
                foreach( var value in Sections ){
                    result.Add(value.XmlSerialize( new XElement( "sections") ) );
                }
            }
            return result;
        }
        /// <summary>
        /// Deserializes an XML node to an instance of Session
        /// </summary>
        internal static Session XmlDeserialize(string payload)
        {
            // deserialize to xml and use the overload to do the work
            return XmlDeserialize( XElement.Parse( payload ) );
        }
        internal static Session XmlDeserialize(XElement payload)
        {
            var result = new Session();
            var deserializeRequestId = XmlSerialization.ToDeserializer(e => (int?)e);
            int? resultRequestId;
            if (deserializeRequestId(payload, "requestId", out resultRequestId))
            {
                result.RequestId = resultRequestId;
            }
            var deserializeOwningSchool = XmlSerialization.ToDeserializer(e => (string)e);
            string resultOwningSchool;
            if (deserializeOwningSchool(payload, "owningSchool", out resultOwningSchool))
            {
                result.OwningSchool = resultOwningSchool;
            }
            var deserializeOwningDepartment = XmlSerialization.ToDeserializer(e => (string)e);
            string resultOwningDepartment;
            if (deserializeOwningDepartment(payload, "owningDepartment", out resultOwningDepartment))
            {
                result.OwningDepartment = resultOwningDepartment;
            }
            var deserializeUserContact = XmlSerialization.ToDeserializer(e => (string)e);
            string resultUserContact;
            if (deserializeUserContact(payload, "userContact", out resultUserContact))
            {
                result.UserContact = resultUserContact;
            }
            var deserializeUserEmail = XmlSerialization.ToDeserializer(e => (string)e);
            string resultUserEmail;
            if (deserializeUserEmail(payload, "userEmail", out resultUserEmail))
            {
                result.UserEmail = resultUserEmail;
            }
            var deserializeUserPhone = XmlSerialization.ToDeserializer(e => (string)e);
            string resultUserPhone;
            if (deserializeUserPhone(payload, "userPhone", out resultUserPhone))
            {
                result.UserPhone = resultUserPhone;
            }
            var deserializeFirstDayOfClass = XmlSerialization.ToDeserializer(e => (System.DateTime?)e);
            System.DateTime? resultFirstDayOfClass;
            if (deserializeFirstDayOfClass(payload, "firstDayOfClass", out resultFirstDayOfClass))
            {
                result.FirstDayOfClass = resultFirstDayOfClass;
            }
            var deserializeLastDayOfClass = XmlSerialization.ToDeserializer(e => (System.DateTime?)e);
            System.DateTime? resultLastDayOfClass;
            if (deserializeLastDayOfClass(payload, "lastDayOfClass", out resultLastDayOfClass))
            {
                result.LastDayOfClass = resultLastDayOfClass;
            }
            var deserializeLastDayForAddDrop = XmlSerialization.ToDeserializer(e => (System.DateTime?)e);
            System.DateTime? resultLastDayForAddDrop;
            if (deserializeLastDayForAddDrop(payload, "lastDayForAddDrop", out resultLastDayForAddDrop))
            {
                result.LastDayForAddDrop = resultLastDayForAddDrop;
            }
            var deserializeLastDayForWithdrawal = XmlSerialization.ToDeserializer(e => (System.DateTime?)e);
            System.DateTime? resultLastDayForWithdrawal;
            if (deserializeLastDayForWithdrawal(payload, "lastDayForWithdrawal", out resultLastDayForWithdrawal))
            {
                result.LastDayForWithdrawal = resultLastDayForWithdrawal;
            }
            var deserializeFirstDayOfFinals = XmlSerialization.ToDeserializer(e => (System.DateTime?)e);
            System.DateTime? resultFirstDayOfFinals;
            if (deserializeFirstDayOfFinals(payload, "firstDayOfFinals", out resultFirstDayOfFinals))
            {
                result.FirstDayOfFinals = resultFirstDayOfFinals;
            }
            var deserializeLastDayOfFinals = XmlSerialization.ToDeserializer(e => (System.DateTime?)e);
            System.DateTime? resultLastDayOfFinals;
            if (deserializeLastDayOfFinals(payload, "lastDayOfFinals", out resultLastDayOfFinals))
            {
                result.LastDayOfFinals = resultLastDayOfFinals;
            }
            var deserializeFirstDayForFinalGrading = XmlSerialization.ToDeserializer(e => (System.DateTime?)e);
            System.DateTime? resultFirstDayForFinalGrading;
            if (deserializeFirstDayForFinalGrading(payload, "firstDayForFinalGrading", out resultFirstDayForFinalGrading))
            {
                result.FirstDayForFinalGrading = resultFirstDayForFinalGrading;
            }
            var deserializeLastDayForFinalGrading = XmlSerialization.ToDeserializer(e => (System.DateTime?)e);
            System.DateTime? resultLastDayForFinalGrading;
            if (deserializeLastDayForFinalGrading(payload, "lastDayForFinalGrading", out resultLastDayForFinalGrading))
            {
                result.LastDayForFinalGrading = resultLastDayForFinalGrading;
            }
            var deserializeLastDayForEnrollmentOptionChange = XmlSerialization.ToDeserializer(e => (System.DateTime?)e);
            System.DateTime? resultLastDayForEnrollmentOptionChange;
            if (deserializeLastDayForEnrollmentOptionChange(payload, "lastDayForEnrollmentOptionChange", out resultLastDayForEnrollmentOptionChange))
            {
                result.LastDayForEnrollmentOptionChange = resultLastDayForEnrollmentOptionChange;
            }
            var deserializeIsClassHeldAtUpc = XmlSerialization.ToDeserializer(e => (bool?)e);
            bool? resultIsClassHeldAtUpc;
            if (deserializeIsClassHeldAtUpc(payload, "isClassHeldAtUpc", out resultIsClassHeldAtUpc))
            {
                result.IsClassHeldAtUpc = resultIsClassHeldAtUpc;
            }
            var deserializeUscCampusLocation = XmlSerialization.ToDeserializer(e => (string)e);
            string resultUscCampusLocation;
            if (deserializeUscCampusLocation(payload, "uscCampusLocation", out resultUscCampusLocation))
            {
                result.UscCampusLocation = resultUscCampusLocation;
            }
            var deserializeOtherCampusLocation = XmlSerialization.ToDeserializer(e => (string)e);
            string resultOtherCampusLocation;
            if (deserializeOtherCampusLocation(payload, "otherCampusLocation", out resultOtherCampusLocation))
            {
                result.OtherCampusLocation = resultOtherCampusLocation;
            }
            var deserializeSessionBreakStart1 = XmlSerialization.ToDeserializer(e => (System.DateTime?)e);
            System.DateTime? resultSessionBreakStart1;
            if (deserializeSessionBreakStart1(payload, "sessionBreakStart1", out resultSessionBreakStart1))
            {
                result.SessionBreakStart1 = resultSessionBreakStart1;
            }
            var deserializeSessionBreakEnd1 = XmlSerialization.ToDeserializer(e => (System.DateTime?)e);
            System.DateTime? resultSessionBreakEnd1;
            if (deserializeSessionBreakEnd1(payload, "sessionBreakEnd1", out resultSessionBreakEnd1))
            {
                result.SessionBreakEnd1 = resultSessionBreakEnd1;
            }
            var deserializeSessionBreakStart2 = XmlSerialization.ToDeserializer(e => (System.DateTime?)e);
            System.DateTime? resultSessionBreakStart2;
            if (deserializeSessionBreakStart2(payload, "sessionBreakStart2", out resultSessionBreakStart2))
            {
                result.SessionBreakStart2 = resultSessionBreakStart2;
            }
            var deserializeSessionBreakEnd2 = XmlSerialization.ToDeserializer(e => (System.DateTime?)e);
            System.DateTime? resultSessionBreakEnd2;
            if (deserializeSessionBreakEnd2(payload, "sessionBreakEnd2", out resultSessionBreakEnd2))
            {
                result.SessionBreakEnd2 = resultSessionBreakEnd2;
            }
            var deserializeSessionCode = XmlSerialization.ToDeserializer(e => (string)e);
            string resultSessionCode;
            if (deserializeSessionCode(payload, "sessionCode", out resultSessionCode))
            {
                result.SessionCode = resultSessionCode;
            }
            var deserializeRateType = XmlSerialization.ToDeserializer(e => (string)e);
            string resultRateType;
            if (deserializeRateType(payload, "rateType", out resultRateType))
            {
                result.RateType = resultRateType;
            }
            var deserializeRatePerUnit = XmlSerialization.ToDeserializer(e => (double?)e);
            double? resultRatePerUnit;
            if (deserializeRatePerUnit(payload, "ratePerUnit", out resultRatePerUnit))
            {
                result.RatePerUnit = resultRatePerUnit;
            }
            var deserializeFlatRateAmount = XmlSerialization.ToDeserializer(e => (double?)e);
            double? resultFlatRateAmount;
            if (deserializeFlatRateAmount(payload, "flatRateAmount", out resultFlatRateAmount))
            {
                result.FlatRateAmount = resultFlatRateAmount;
            }
            var deserializeFlatRateUnitsMin = XmlSerialization.ToDeserializer(e => (int?)e);
            int? resultFlatRateUnitsMin;
            if (deserializeFlatRateUnitsMin(payload, "flatRateUnitsMin", out resultFlatRateUnitsMin))
            {
                result.FlatRateUnitsMin = resultFlatRateUnitsMin;
            }
            var deserializeFlatRateUnitsMax = XmlSerialization.ToDeserializer(e => (int?)e);
            int? resultFlatRateUnitsMax;
            if (deserializeFlatRateUnitsMax(payload, "flatRateUnitsMax", out resultFlatRateUnitsMax))
            {
                result.FlatRateUnitsMax = resultFlatRateUnitsMax;
            }
            var deserializeSubmitDate = XmlSerialization.ToDeserializer(e => (System.DateTime?)e);
            System.DateTime? resultSubmitDate;
            if (deserializeSubmitDate(payload, "submitDate", out resultSubmitDate))
            {
                result.SubmitDate = resultSubmitDate;
            }
            var deserializeComments = XmlSerialization.ToDeserializer(e => (string)e);
            string resultComments;
            if (deserializeComments(payload, "comments", out resultComments))
            {
                result.Comments = resultComments;
            }
            var deserializeSections = XmlSerialization.CreateListXmlDeserializer(XmlSerialization.ToDeserializer(e => Section.XmlDeserialize(e)), null);
            IList<Section> resultSections;
            if (deserializeSections(payload, "sections", out resultSections))
            {
                result.Sections = resultSections;
            }
            return result;
        }
    }
}

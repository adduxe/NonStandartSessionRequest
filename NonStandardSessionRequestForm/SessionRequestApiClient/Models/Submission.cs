// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SessionRequestApi.Client.Models
{
    using Newtonsoft.Json;
    using SessionRequestApi.Client;
    using System.Linq;
    using System.Xml;
    using System.Xml.Linq;

    public partial class Submission
    {
        /// <summary>
        /// Initializes a new instance of the Submission class.
        /// </summary>
        public Submission()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Submission class.
        /// </summary>
        public Submission(int? submissionId = default(int?), string faoAction = default(string), System.DateTime? faoActionDate = default(System.DateTime?), string faoActionReason = default(string), string rnrAction = default(string), System.DateTime? rnrActionDate = default(System.DateTime?), string rnrActionReason = default(string))
        {
            SubmissionId = submissionId;
            FaoAction = faoAction;
            FaoActionDate = faoActionDate;
            FaoActionReason = faoActionReason;
            RnrAction = rnrAction;
            RnrActionDate = rnrActionDate;
            RnrActionReason = rnrActionReason;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "submissionId")]
        public int? SubmissionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "faoAction")]
        public string FaoAction { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "faoActionDate")]
        public System.DateTime? FaoActionDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "faoActionReason")]
        public string FaoActionReason { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rnrAction")]
        public string RnrAction { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rnrActionDate")]
        public System.DateTime? RnrActionDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rnrActionReason")]
        public string RnrActionReason { get; set; }

        /// <summary>
        /// Serializes the object to an XML node
        /// </summary>
        internal XElement XmlSerialize(XElement result)
        {
            if( null != SubmissionId )
            {
                result.Add(new XElement("submissionId", SubmissionId) );
            }
            if( null != FaoAction )
            {
                result.Add(new XElement("faoAction", FaoAction) );
            }
            if( null != FaoActionDate )
            {
                result.Add(new XElement("faoActionDate", FaoActionDate) );
            }
            if( null != FaoActionReason )
            {
                result.Add(new XElement("faoActionReason", FaoActionReason) );
            }
            if( null != RnrAction )
            {
                result.Add(new XElement("rnrAction", RnrAction) );
            }
            if( null != RnrActionDate )
            {
                result.Add(new XElement("rnrActionDate", RnrActionDate) );
            }
            if( null != RnrActionReason )
            {
                result.Add(new XElement("rnrActionReason", RnrActionReason) );
            }
            return result;
        }
        /// <summary>
        /// Deserializes an XML node to an instance of Submission
        /// </summary>
        internal static Submission XmlDeserialize(string payload)
        {
            // deserialize to xml and use the overload to do the work
            return XmlDeserialize( XElement.Parse( payload ) );
        }
        internal static Submission XmlDeserialize(XElement payload)
        {
            var result = new Submission();
            var deserializeSubmissionId = XmlSerialization.ToDeserializer(e => (int?)e);
            int? resultSubmissionId;
            if (deserializeSubmissionId(payload, "submissionId", out resultSubmissionId))
            {
                result.SubmissionId = resultSubmissionId;
            }
            var deserializeFaoAction = XmlSerialization.ToDeserializer(e => (string)e);
            string resultFaoAction;
            if (deserializeFaoAction(payload, "faoAction", out resultFaoAction))
            {
                result.FaoAction = resultFaoAction;
            }
            var deserializeFaoActionDate = XmlSerialization.ToDeserializer(e => (System.DateTime?)e);
            System.DateTime? resultFaoActionDate;
            if (deserializeFaoActionDate(payload, "faoActionDate", out resultFaoActionDate))
            {
                result.FaoActionDate = resultFaoActionDate;
            }
            var deserializeFaoActionReason = XmlSerialization.ToDeserializer(e => (string)e);
            string resultFaoActionReason;
            if (deserializeFaoActionReason(payload, "faoActionReason", out resultFaoActionReason))
            {
                result.FaoActionReason = resultFaoActionReason;
            }
            var deserializeRnrAction = XmlSerialization.ToDeserializer(e => (string)e);
            string resultRnrAction;
            if (deserializeRnrAction(payload, "rnrAction", out resultRnrAction))
            {
                result.RnrAction = resultRnrAction;
            }
            var deserializeRnrActionDate = XmlSerialization.ToDeserializer(e => (System.DateTime?)e);
            System.DateTime? resultRnrActionDate;
            if (deserializeRnrActionDate(payload, "rnrActionDate", out resultRnrActionDate))
            {
                result.RnrActionDate = resultRnrActionDate;
            }
            var deserializeRnrActionReason = XmlSerialization.ToDeserializer(e => (string)e);
            string resultRnrActionReason;
            if (deserializeRnrActionReason(payload, "rnrActionReason", out resultRnrActionReason))
            {
                result.RnrActionReason = resultRnrActionReason;
            }
            return result;
        }
    }
}

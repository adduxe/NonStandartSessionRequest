// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace DataApiClient
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for IdLookups.
    /// </summary>
    public static partial class IdLookupsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Get(this IIdLookups operations)
            {
                return Task.Factory.StartNew(s => ((IIdLookups)s).GetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this IIdLookups operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idLookup'>
            /// </param>
            public static object PostByIdLookup(this IIdLookups operations, IdLookup idLookup)
            {
                return Task.Factory.StartNew(s => ((IIdLookups)s).PostByIdLookupAsync(idLookup), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idLookup'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostByIdLookupAsync(this IIdLookups operations, IdLookup idLookup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostByIdLookupWithHttpMessagesAsync(idLookup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='casID'>
            /// </param>
            public static object GetByCasID(this IIdLookups operations, string casID)
            {
                return Task.Factory.StartNew(s => ((IIdLookups)s).GetByCasIDAsync(casID), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='casID'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByCasIDAsync(this IIdLookups operations, string casID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByCasIDWithHttpMessagesAsync(casID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='casID'>
            /// </param>
            /// <param name='idLookup'>
            /// </param>
            public static object PutByCasIDIdLookup(this IIdLookups operations, string casID, IdLookup idLookup)
            {
                return Task.Factory.StartNew(s => ((IIdLookups)s).PutByCasIDIdLookupAsync(casID, idLookup), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='casID'>
            /// </param>
            /// <param name='idLookup'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutByCasIDIdLookupAsync(this IIdLookups operations, string casID, IdLookup idLookup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutByCasIDIdLookupWithHttpMessagesAsync(casID, idLookup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

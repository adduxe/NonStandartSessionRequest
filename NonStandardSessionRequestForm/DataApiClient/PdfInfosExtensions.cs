// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace DataApiClient
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for PdfInfos.
    /// </summary>
    public static partial class PdfInfosExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='casID'>
            /// </param>
            public static object GetByCasID(this IPdfInfos operations, string casID)
            {
                return Task.Factory.StartNew(s => ((IPdfInfos)s).GetByCasIDAsync(casID), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='casID'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByCasIDAsync(this IPdfInfos operations, string casID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByCasIDWithHttpMessagesAsync(casID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='casID'>
            /// </param>
            /// <param name='dexFlowDocumentType'>
            /// </param>
            /// <param name='cycleName'>
            /// </param>
            /// <param name='collegeSequenceId'>
            /// </param>
            public static object GetByCasIDDexFlowDocumentTypeCycleNameCollegeSequenceId(this IPdfInfos operations, string casID, string dexFlowDocumentType, string cycleName, string collegeSequenceId = default(string))
            {
                return Task.Factory.StartNew(s => ((IPdfInfos)s).GetByCasIDDexFlowDocumentTypeCycleNameCollegeSequenceIdAsync(casID, dexFlowDocumentType, cycleName, collegeSequenceId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='casID'>
            /// </param>
            /// <param name='dexFlowDocumentType'>
            /// </param>
            /// <param name='cycleName'>
            /// </param>
            /// <param name='collegeSequenceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByCasIDDexFlowDocumentTypeCycleNameCollegeSequenceIdAsync(this IPdfInfos operations, string casID, string dexFlowDocumentType, string cycleName, string collegeSequenceId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByCasIDDexFlowDocumentTypeCycleNameCollegeSequenceIdWithHttpMessagesAsync(casID, dexFlowDocumentType, cycleName, collegeSequenceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='casID'>
            /// </param>
            /// <param name='dexFlowDocumentType'>
            /// </param>
            /// <param name='cycleName'>
            /// </param>
            /// <param name='pdfInfo'>
            /// </param>
            public static object PutByCasIDDexFlowDocumentTypeCycleNamePdfInfo(this IPdfInfos operations, string casID, string dexFlowDocumentType, string cycleName, PdfInfo pdfInfo)
            {
                return Task.Factory.StartNew(s => ((IPdfInfos)s).PutByCasIDDexFlowDocumentTypeCycleNamePdfInfoAsync(casID, dexFlowDocumentType, cycleName, pdfInfo), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='casID'>
            /// </param>
            /// <param name='dexFlowDocumentType'>
            /// </param>
            /// <param name='cycleName'>
            /// </param>
            /// <param name='pdfInfo'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutByCasIDDexFlowDocumentTypeCycleNamePdfInfoAsync(this IPdfInfos operations, string casID, string dexFlowDocumentType, string cycleName, PdfInfo pdfInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutByCasIDDexFlowDocumentTypeCycleNamePdfInfoWithHttpMessagesAsync(casID, dexFlowDocumentType, cycleName, pdfInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pdfInfo'>
            /// </param>
            public static object PostByPdfInfo(this IPdfInfos operations, PdfInfo pdfInfo)
            {
                return Task.Factory.StartNew(s => ((IPdfInfos)s).PostByPdfInfoAsync(pdfInfo), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pdfInfo'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostByPdfInfoAsync(this IPdfInfos operations, PdfInfo pdfInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostByPdfInfoWithHttpMessagesAsync(pdfInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

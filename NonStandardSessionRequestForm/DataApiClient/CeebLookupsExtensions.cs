// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace DataApi
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for CeebLookups.
    /// </summary>
    public static partial class CeebLookupsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Get(this ICeebLookups operations)
            {
                return Task.Factory.StartNew(s => ((ICeebLookups)s).GetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this ICeebLookups operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ceebLookup'>
            /// </param>
            public static object PostByceebLookup(this ICeebLookups operations, CeebLookup ceebLookup)
            {
                return Task.Factory.StartNew(s => ((ICeebLookups)s).PostByceebLookupAsync(ceebLookup), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ceebLookup'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostByceebLookupAsync(this ICeebLookups operations, CeebLookup ceebLookup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostByceebLookupWithHttpMessagesAsync(ceebLookup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ceeb'>
            /// </param>
            public static object GetCeebByUscCeebByceeb(this ICeebLookups operations, string ceeb)
            {
                return Task.Factory.StartNew(s => ((ICeebLookups)s).GetCeebByUscCeebByceebAsync(ceeb), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ceeb'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCeebByUscCeebByceebAsync(this ICeebLookups operations, string ceeb, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCeebByUscCeebByceebWithHttpMessagesAsync(ceeb, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ceeb'>
            /// </param>
            public static object GetCeebByLiaisonCeebByceeb(this ICeebLookups operations, string ceeb)
            {
                return Task.Factory.StartNew(s => ((ICeebLookups)s).GetCeebByLiaisonCeebByceebAsync(ceeb), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ceeb'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCeebByLiaisonCeebByceebAsync(this ICeebLookups operations, string ceeb, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCeebByLiaisonCeebByceebWithHttpMessagesAsync(ceeb, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ceeblookups'>
            /// </param>
            public static object PostByceeblookups(this ICeebLookups operations, IList<CeebLookup> ceeblookups)
            {
                return Task.Factory.StartNew(s => ((ICeebLookups)s).PostByceeblookupsAsync(ceeblookups), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ceeblookups'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostByceeblookupsAsync(this ICeebLookups operations, IList<CeebLookup> ceeblookups, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostByceeblookupsWithHttpMessagesAsync(ceeblookups, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='liaisonCeeb'>
            /// </param>
            /// <param name='ceebLookup'>
            /// </param>
            public static object PutByliaisonCeebceebLookup(this ICeebLookups operations, string liaisonCeeb, CeebLookup ceebLookup)
            {
                return Task.Factory.StartNew(s => ((ICeebLookups)s).PutByliaisonCeebceebLookupAsync(liaisonCeeb, ceebLookup), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='liaisonCeeb'>
            /// </param>
            /// <param name='ceebLookup'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutByliaisonCeebceebLookupAsync(this ICeebLookups operations, string liaisonCeeb, CeebLookup ceebLookup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutByliaisonCeebceebLookupWithHttpMessagesAsync(liaisonCeeb, ceebLookup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='liaisonCeeb'>
            /// </param>
            public static object DeleteByliaisonCeeb(this ICeebLookups operations, string liaisonCeeb)
            {
                return Task.Factory.StartNew(s => ((ICeebLookups)s).DeleteByliaisonCeebAsync(liaisonCeeb), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='liaisonCeeb'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteByliaisonCeebAsync(this ICeebLookups operations, string liaisonCeeb, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteByliaisonCeebWithHttpMessagesAsync(liaisonCeeb, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace DataApiClient
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for CeebLookups.
    /// </summary>
    public static partial class CeebLookupsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Get(this ICeebLookups operations)
            {
                return Task.Factory.StartNew(s => ((ICeebLookups)s).GetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this ICeebLookups operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ceebLookup'>
            /// </param>
            public static object PostByCeebLookup(this ICeebLookups operations, CeebLookup ceebLookup)
            {
                return Task.Factory.StartNew(s => ((ICeebLookups)s).PostByCeebLookupAsync(ceebLookup), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ceebLookup'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostByCeebLookupAsync(this ICeebLookups operations, CeebLookup ceebLookup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostByCeebLookupWithHttpMessagesAsync(ceebLookup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ceeb'>
            /// </param>
            public static object GetCeebByUscCeebByCeeb(this ICeebLookups operations, string ceeb)
            {
                return Task.Factory.StartNew(s => ((ICeebLookups)s).GetCeebByUscCeebByCeebAsync(ceeb), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ceeb'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCeebByUscCeebByCeebAsync(this ICeebLookups operations, string ceeb, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCeebByUscCeebByCeebWithHttpMessagesAsync(ceeb, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ceeb'>
            /// </param>
            public static object GetCeebByLiaisonCeebByCeeb(this ICeebLookups operations, string ceeb)
            {
                return Task.Factory.StartNew(s => ((ICeebLookups)s).GetCeebByLiaisonCeebByCeebAsync(ceeb), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ceeb'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCeebByLiaisonCeebByCeebAsync(this ICeebLookups operations, string ceeb, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCeebByLiaisonCeebByCeebWithHttpMessagesAsync(ceeb, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ceeblookups'>
            /// </param>
            public static object PostByCeeblookups(this ICeebLookups operations, IList<CeebLookup> ceeblookups)
            {
                return Task.Factory.StartNew(s => ((ICeebLookups)s).PostByCeeblookupsAsync(ceeblookups), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ceeblookups'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostByCeeblookupsAsync(this ICeebLookups operations, IList<CeebLookup> ceeblookups, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostByCeeblookupsWithHttpMessagesAsync(ceeblookups, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='liaisonCeeb'>
            /// </param>
            /// <param name='ceebLookup'>
            /// </param>
            public static object PutByLiaisonCeebCeebLookup(this ICeebLookups operations, string liaisonCeeb, CeebLookup ceebLookup)
            {
                return Task.Factory.StartNew(s => ((ICeebLookups)s).PutByLiaisonCeebCeebLookupAsync(liaisonCeeb, ceebLookup), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='liaisonCeeb'>
            /// </param>
            /// <param name='ceebLookup'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutByLiaisonCeebCeebLookupAsync(this ICeebLookups operations, string liaisonCeeb, CeebLookup ceebLookup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutByLiaisonCeebCeebLookupWithHttpMessagesAsync(liaisonCeeb, ceebLookup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='liaisonCeeb'>
            /// </param>
            public static object DeleteByLiaisonCeeb(this ICeebLookups operations, string liaisonCeeb)
            {
                return Task.Factory.StartNew(s => ((ICeebLookups)s).DeleteByLiaisonCeebAsync(liaisonCeeb), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='liaisonCeeb'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteByLiaisonCeebAsync(this ICeebLookups operations, string liaisonCeeb, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteByLiaisonCeebWithHttpMessagesAsync(liaisonCeeb, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

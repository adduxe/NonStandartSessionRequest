// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace DataApi
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Parents.
    /// </summary>
    public static partial class ParentsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Get(this IParents operations)
            {
                return Task.Factory.StartNew(s => ((IParents)s).GetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this IParents operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicantUscId'>
            /// </param>
            public static object GetByapplicantUscId(this IParents operations, string applicantUscId)
            {
                return Task.Factory.StartNew(s => ((IParents)s).GetByapplicantUscIdAsync(applicantUscId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicantUscId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByapplicantUscIdAsync(this IParents operations, string applicantUscId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByapplicantUscIdWithHttpMessagesAsync(applicantUscId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicantUscId'>
            /// </param>
            /// <param name='parent'>
            /// </param>
            public static object PostByapplicantUscIdparent(this IParents operations, string applicantUscId, Parent parent)
            {
                return Task.Factory.StartNew(s => ((IParents)s).PostByapplicantUscIdparentAsync(applicantUscId, parent), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicantUscId'>
            /// </param>
            /// <param name='parent'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostByapplicantUscIdparentAsync(this IParents operations, string applicantUscId, Parent parent, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostByapplicantUscIdparentWithHttpMessagesAsync(applicantUscId, parent, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parentId'>
            /// </param>
            public static object GetByparentId(this IParents operations, int parentId)
            {
                return Task.Factory.StartNew(s => ((IParents)s).GetByparentIdAsync(parentId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parentId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByparentIdAsync(this IParents operations, int parentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByparentIdWithHttpMessagesAsync(parentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicantUscId'>
            /// </param>
            /// <param name='parentId'>
            /// </param>
            public static object GetByapplicantUscIdparentId(this IParents operations, string applicantUscId, int parentId)
            {
                return Task.Factory.StartNew(s => ((IParents)s).GetByapplicantUscIdparentIdAsync(applicantUscId, parentId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicantUscId'>
            /// </param>
            /// <param name='parentId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByapplicantUscIdparentIdAsync(this IParents operations, string applicantUscId, int parentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByapplicantUscIdparentIdWithHttpMessagesAsync(applicantUscId, parentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicantUscId'>
            /// </param>
            /// <param name='parentId'>
            /// </param>
            /// <param name='parent'>
            /// </param>
            public static object PutByapplicantUscIdparentIdparent(this IParents operations, string applicantUscId, int parentId, Parent parent)
            {
                return Task.Factory.StartNew(s => ((IParents)s).PutByapplicantUscIdparentIdparentAsync(applicantUscId, parentId, parent), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicantUscId'>
            /// </param>
            /// <param name='parentId'>
            /// </param>
            /// <param name='parent'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutByapplicantUscIdparentIdparentAsync(this IParents operations, string applicantUscId, int parentId, Parent parent, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutByapplicantUscIdparentIdparentWithHttpMessagesAsync(applicantUscId, parentId, parent, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicantUscId'>
            /// </param>
            /// <param name='parentId'>
            /// </param>
            public static object DeleteByapplicantUscIdparentId(this IParents operations, string applicantUscId, int parentId)
            {
                return Task.Factory.StartNew(s => ((IParents)s).DeleteByapplicantUscIdparentIdAsync(applicantUscId, parentId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicantUscId'>
            /// </param>
            /// <param name='parentId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteByapplicantUscIdparentIdAsync(this IParents operations, string applicantUscId, int parentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteByapplicantUscIdparentIdWithHttpMessagesAsync(applicantUscId, parentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

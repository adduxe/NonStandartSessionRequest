// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace DataApiClient
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for DocumentTypes.
    /// </summary>
    public static partial class DocumentTypesExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Get(this IDocumentTypes operations)
            {
                return Task.Factory.StartNew(s => ((IDocumentTypes)s).GetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this IDocumentTypes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='docType'>
            /// </param>
            public static object GetByLiaisonDocTypeByDocType(this IDocumentTypes operations, string docType)
            {
                return Task.Factory.StartNew(s => ((IDocumentTypes)s).GetByLiaisonDocTypeByDocTypeAsync(docType), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='docType'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByLiaisonDocTypeByDocTypeAsync(this IDocumentTypes operations, string docType, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByLiaisonDocTypeByDocTypeWithHttpMessagesAsync(docType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='docType'>
            /// </param>
            public static object GetByDexFlowDocTypeByDocType(this IDocumentTypes operations, string docType)
            {
                return Task.Factory.StartNew(s => ((IDocumentTypes)s).GetByDexFlowDocTypeByDocTypeAsync(docType), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='docType'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByDexFlowDocTypeByDocTypeAsync(this IDocumentTypes operations, string docType, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByDexFlowDocTypeByDocTypeWithHttpMessagesAsync(docType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

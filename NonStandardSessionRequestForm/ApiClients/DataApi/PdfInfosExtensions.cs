// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DataApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PdfInfos.
    /// </summary>
    public static partial class PdfInfosExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='casID'>
            /// </param>
            public static object GetByCasID(this IPdfInfos operations, string casID)
            {
                return operations.GetByCasIDAsync(casID).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='casID'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByCasIDAsync(this IPdfInfos operations, string casID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByCasIDWithHttpMessagesAsync(casID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='casID'>
            /// </param>
            /// <param name='dexFlowDocumentType'>
            /// </param>
            /// <param name='cycleName'>
            /// </param>
            /// <param name='collegeSequenceId'>
            /// </param>
            public static object GetByCasIDDexFlowDocumentTypeCycleNameCollegeSequenceId(this IPdfInfos operations, string casID, string dexFlowDocumentType, string cycleName, string collegeSequenceId = default(string))
            {
                return operations.GetByCasIDDexFlowDocumentTypeCycleNameCollegeSequenceIdAsync(casID, dexFlowDocumentType, cycleName, collegeSequenceId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='casID'>
            /// </param>
            /// <param name='dexFlowDocumentType'>
            /// </param>
            /// <param name='cycleName'>
            /// </param>
            /// <param name='collegeSequenceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByCasIDDexFlowDocumentTypeCycleNameCollegeSequenceIdAsync(this IPdfInfos operations, string casID, string dexFlowDocumentType, string cycleName, string collegeSequenceId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByCasIDDexFlowDocumentTypeCycleNameCollegeSequenceIdWithHttpMessagesAsync(casID, dexFlowDocumentType, cycleName, collegeSequenceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='casID'>
            /// </param>
            /// <param name='dexFlowDocumentType'>
            /// </param>
            /// <param name='cycleName'>
            /// </param>
            /// <param name='pdfInfo'>
            /// </param>
            public static object PutByCasIDDexFlowDocumentTypeCycleNamePdfInfo(this IPdfInfos operations, string casID, string dexFlowDocumentType, string cycleName, PdfInfo pdfInfo)
            {
                return operations.PutByCasIDDexFlowDocumentTypeCycleNamePdfInfoAsync(casID, dexFlowDocumentType, cycleName, pdfInfo).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='casID'>
            /// </param>
            /// <param name='dexFlowDocumentType'>
            /// </param>
            /// <param name='cycleName'>
            /// </param>
            /// <param name='pdfInfo'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutByCasIDDexFlowDocumentTypeCycleNamePdfInfoAsync(this IPdfInfos operations, string casID, string dexFlowDocumentType, string cycleName, PdfInfo pdfInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutByCasIDDexFlowDocumentTypeCycleNamePdfInfoWithHttpMessagesAsync(casID, dexFlowDocumentType, cycleName, pdfInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pdfInfo'>
            /// </param>
            public static object PostByPdfInfo(this IPdfInfos operations, PdfInfo pdfInfo)
            {
                return operations.PostByPdfInfoAsync(pdfInfo).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pdfInfo'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostByPdfInfoAsync(this IPdfInfos operations, PdfInfo pdfInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostByPdfInfoWithHttpMessagesAsync(pdfInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

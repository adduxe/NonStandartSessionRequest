// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DataApi
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    public partial class DataAPI : ServiceClient<DataAPI>, IDataAPI
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Gets the IApplicants.
        /// </summary>
        public virtual IApplicants Applicants { get; private set; }

        /// <summary>
        /// Gets the IApplications.
        /// </summary>
        public virtual IApplications Applications { get; private set; }

        /// <summary>
        /// Gets the ICeebLookups.
        /// </summary>
        public virtual ICeebLookups CeebLookups { get; private set; }

        /// <summary>
        /// Gets the IControlRecords.
        /// </summary>
        public virtual IControlRecords ControlRecords { get; private set; }

        /// <summary>
        /// Gets the IDocumentQueues.
        /// </summary>
        public virtual IDocumentQueues DocumentQueues { get; private set; }

        /// <summary>
        /// Gets the IDocumentTypes.
        /// </summary>
        public virtual IDocumentTypes DocumentTypes { get; private set; }

        /// <summary>
        /// Gets the IErrorTexts.
        /// </summary>
        public virtual IErrorTexts ErrorTexts { get; private set; }

        /// <summary>
        /// Gets the IFlags.
        /// </summary>
        public virtual IFlags Flags { get; private set; }

        /// <summary>
        /// Gets the IGroups.
        /// </summary>
        public virtual IGroups Groups { get; private set; }

        /// <summary>
        /// Gets the IHousingOptions.
        /// </summary>
        public virtual IHousingOptions HousingOptions { get; private set; }

        /// <summary>
        /// Gets the IIdLookups.
        /// </summary>
        public virtual IIdLookups IdLookups { get; private set; }

        /// <summary>
        /// Gets the IOrientationOptions.
        /// </summary>
        public virtual IOrientationOptions OrientationOptions { get; private set; }

        /// <summary>
        /// Gets the IParents.
        /// </summary>
        public virtual IParents Parents { get; private set; }

        /// <summary>
        /// Gets the IPayments.
        /// </summary>
        public virtual IPayments Payments { get; private set; }

        /// <summary>
        /// Gets the IPdfInfos.
        /// </summary>
        public virtual IPdfInfos PdfInfos { get; private set; }

        /// <summary>
        /// Gets the ISessionRequest.
        /// </summary>
        public virtual ISessionRequest SessionRequest { get; private set; }

        /// <summary>
        /// Gets the ISubmissions.
        /// </summary>
        public virtual ISubmissions Submissions { get; private set; }

        /// <summary>
        /// Gets the IUsers.
        /// </summary>
        public virtual IUsers Users { get; private set; }

        /// <summary>
        /// Initializes a new instance of the DataAPI class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public DataAPI(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DataAPI class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public DataAPI(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DataAPI class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DataAPI(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the DataAPI class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DataAPI(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            Applicants = new Applicants(this);
            Applications = new Applications(this);
            CeebLookups = new CeebLookups(this);
            ControlRecords = new ControlRecords(this);
            DocumentQueues = new DocumentQueues(this);
            DocumentTypes = new DocumentTypes(this);
            ErrorTexts = new ErrorTexts(this);
            Flags = new Flags(this);
            Groups = new Groups(this);
            HousingOptions = new HousingOptions(this);
            IdLookups = new IdLookups(this);
            OrientationOptions = new OrientationOptions(this);
            Parents = new Parents(this);
            Payments = new Payments(this);
            PdfInfos = new PdfInfos(this);
            SessionRequest = new SessionRequest(this);
            Submissions = new Submissions(this);
            Users = new Users(this);
            BaseUri = new System.Uri("http://omw-vm1.usc.edu/DataApi");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
    }
}

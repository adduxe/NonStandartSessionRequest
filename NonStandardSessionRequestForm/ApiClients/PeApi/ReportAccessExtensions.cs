// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PeApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ReportAccess.
    /// </summary>
    public static partial class ReportAccessExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='netid'>
            /// </param>
            public static object GetUserAccessByNetId(this IReportAccess operations, string netid)
            {
                return operations.GetUserAccessByNetIdAsync(netid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='netid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserAccessByNetIdAsync(this IReportAccess operations, string netid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserAccessByNetIdWithHttpMessagesAsync(netid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='oper'>
            /// </param>
            /// <param name='netid'>
            /// </param>
            public static object RevokeUserAccessByNetId(this IReportAccess operations, string oper, string netid)
            {
                return operations.RevokeUserAccessByNetIdAsync(oper, netid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='oper'>
            /// </param>
            /// <param name='netid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RevokeUserAccessByNetIdAsync(this IReportAccess operations, string oper, string netid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RevokeUserAccessByNetIdWithHttpMessagesAsync(oper, netid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dtoUser'>
            /// </param>
            public static object PopulateUser(this IReportAccess operations, USCPEApiDTOReportAccessUser dtoUser)
            {
                return operations.PopulateUserAsync(dtoUser).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dtoUser'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PopulateUserAsync(this IReportAccess operations, USCPEApiDTOReportAccessUser dtoUser, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PopulateUserWithHttpMessagesAsync(dtoUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='permission'>
            /// </param>
            public static object SetUscAccess(this IReportAccess operations, string user, USCPEApiDTOReportAccessPermission permission)
            {
                return operations.SetUscAccessAsync(user, permission).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='permission'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetUscAccessAsync(this IReportAccess operations, string user, USCPEApiDTOReportAccessPermission permission, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetUscAccessWithHttpMessagesAsync(user, permission, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='oper'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object RevokeUscAccess(this IReportAccess operations, string oper, int id)
            {
                return operations.RevokeUscAccessAsync(oper, id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='oper'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RevokeUscAccessAsync(this IReportAccess operations, string oper, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RevokeUscAccessWithHttpMessagesAsync(oper, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='permission'>
            /// </param>
            public static object SetSchoolAccess(this IReportAccess operations, string user, USCPEApiDTOReportAccessPermission permission)
            {
                return operations.SetSchoolAccessAsync(user, permission).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='permission'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetSchoolAccessAsync(this IReportAccess operations, string user, USCPEApiDTOReportAccessPermission permission, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetSchoolAccessWithHttpMessagesAsync(user, permission, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='oper'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object RevokeSchoolAccess(this IReportAccess operations, string oper, int id)
            {
                return operations.RevokeSchoolAccessAsync(oper, id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='oper'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RevokeSchoolAccessAsync(this IReportAccess operations, string oper, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RevokeSchoolAccessWithHttpMessagesAsync(oper, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='permission'>
            /// </param>
            public static object SetDepartmentAccess(this IReportAccess operations, string user, USCPEApiDTOReportAccessPermission permission)
            {
                return operations.SetDepartmentAccessAsync(user, permission).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='permission'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetDepartmentAccessAsync(this IReportAccess operations, string user, USCPEApiDTOReportAccessPermission permission, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetDepartmentAccessWithHttpMessagesAsync(user, permission, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='oper'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object RevokeDepartmentAccess(this IReportAccess operations, string oper, int id)
            {
                return operations.RevokeDepartmentAccessAsync(oper, id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='oper'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RevokeDepartmentAccessAsync(this IReportAccess operations, string oper, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RevokeDepartmentAccessWithHttpMessagesAsync(oper, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='permission'>
            /// </param>
            public static object SetPostAccess(this IReportAccess operations, string user, USCPEApiDTOReportAccessPermission permission)
            {
                return operations.SetPostAccessAsync(user, permission).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='permission'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetPostAccessAsync(this IReportAccess operations, string user, USCPEApiDTOReportAccessPermission permission, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetPostAccessWithHttpMessagesAsync(user, permission, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='oper'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object RevokePostAccess(this IReportAccess operations, string oper, int id)
            {
                return operations.RevokePostAccessAsync(oper, id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='oper'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RevokePostAccessAsync(this IReportAccess operations, string oper, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RevokePostAccessWithHttpMessagesAsync(oper, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='permission'>
            /// </param>
            public static object SetPoiAccess(this IReportAccess operations, string user, USCPEApiDTOReportAccessPermission permission)
            {
                return operations.SetPoiAccessAsync(user, permission).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='permission'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetPoiAccessAsync(this IReportAccess operations, string user, USCPEApiDTOReportAccessPermission permission, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetPoiAccessWithHttpMessagesAsync(user, permission, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='oper'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object RevokePoiAccess(this IReportAccess operations, string oper, int id)
            {
                return operations.RevokePoiAccessAsync(oper, id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='oper'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RevokePoiAccessAsync(this IReportAccess operations, string oper, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RevokePoiAccessWithHttpMessagesAsync(oper, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

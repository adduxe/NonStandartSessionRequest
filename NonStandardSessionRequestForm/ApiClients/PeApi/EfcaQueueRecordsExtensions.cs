// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PeApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EfcaQueueRecords.
    /// </summary>
    public static partial class EfcaQueueRecordsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<EfcaQueuesEfcaQueueRecord> LOAD(this IEfcaQueueRecords operations)
            {
                return operations.LOADAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EfcaQueuesEfcaQueueRecord>> LOADAsync(this IEfcaQueueRecords operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LOADWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='efcaRecords'>
            /// </param>
            public static IList<EfcaQueuesEfcaQueueRecord> PostEfcaQueueRecords(this IEfcaQueueRecords operations, IList<EfcaQueuesEfcaQueueRecord> efcaRecords)
            {
                return operations.PostEfcaQueueRecordsAsync(efcaRecords).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='efcaRecords'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EfcaQueuesEfcaQueueRecord>> PostEfcaQueueRecordsAsync(this IEfcaQueueRecords operations, IList<EfcaQueuesEfcaQueueRecord> efcaRecords, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostEfcaQueueRecordsWithHttpMessagesAsync(efcaRecords, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static EfcaQueuesEfcaQueueRecord GetEfcaQueueRecord(this IEfcaQueueRecords operations, string id)
            {
                return operations.GetEfcaQueueRecordAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EfcaQueuesEfcaQueueRecord> GetEfcaQueueRecordAsync(this IEfcaQueueRecords operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEfcaQueueRecordWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='efcaQueueRecord'>
            /// </param>
            public static void PutEfcaQueueRecord(this IEfcaQueueRecords operations, string id, EfcaQueuesEfcaQueueRecord efcaQueueRecord)
            {
                operations.PutEfcaQueueRecordAsync(id, efcaQueueRecord).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='efcaQueueRecord'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutEfcaQueueRecordAsync(this IEfcaQueueRecords operations, string id, EfcaQueuesEfcaQueueRecord efcaQueueRecord, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutEfcaQueueRecordWithHttpMessagesAsync(id, efcaQueueRecord, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static EfcaQueuesEfcaQueueRecord DeleteEfcaQueueRecord(this IEfcaQueueRecords operations, string id)
            {
                return operations.DeleteEfcaQueueRecordAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EfcaQueuesEfcaQueueRecord> DeleteEfcaQueueRecordAsync(this IEfcaQueueRecords operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteEfcaQueueRecordWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

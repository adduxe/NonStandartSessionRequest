// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PeApi
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    public partial class PEApi : ServiceClient<PEApi>, IPEApi
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Gets the IAdvancement.
        /// </summary>
        public virtual IAdvancement Advancement { get; private set; }

        /// <summary>
        /// Gets the IAgingRecords.
        /// </summary>
        public virtual IAgingRecords AgingRecords { get; private set; }

        /// <summary>
        /// Gets the IAgingReports.
        /// </summary>
        public virtual IAgingReports AgingReports { get; private set; }

        /// <summary>
        /// Gets the IApplications.
        /// </summary>
        public virtual IApplications Applications { get; private set; }

        /// <summary>
        /// Gets the IBuildings.
        /// </summary>
        public virtual IBuildings Buildings { get; private set; }

        /// <summary>
        /// Gets the IBursar.
        /// </summary>
        public virtual IBursar Bursar { get; private set; }

        /// <summary>
        /// Gets the ICaoApps.
        /// </summary>
        public virtual ICaoApps CaoApps { get; private set; }

        /// <summary>
        /// Gets the ICertifiedStudents.
        /// </summary>
        public virtual ICertifiedStudents CertifiedStudents { get; private set; }

        /// <summary>
        /// Gets the ICountries.
        /// </summary>
        public virtual ICountries Countries { get; private set; }

        /// <summary>
        /// Gets the IEducationModuleHolds.
        /// </summary>
        public virtual IEducationModuleHolds EducationModuleHolds { get; private set; }

        /// <summary>
        /// Gets the IEfcaQueueRecords.
        /// </summary>
        public virtual IEfcaQueueRecords EfcaQueueRecords { get; private set; }

        /// <summary>
        /// Gets the IEmail.
        /// </summary>
        public virtual IEmail Email { get; private set; }

        /// <summary>
        /// Gets the IEvents.
        /// </summary>
        public virtual IEvents Events { get; private set; }

        /// <summary>
        /// Gets the IExplorers.
        /// </summary>
        public virtual IExplorers Explorers { get; private set; }

        /// <summary>
        /// Gets the IHostOptions.
        /// </summary>
        public virtual IHostOptions HostOptions { get; private set; }

        /// <summary>
        /// Gets the IHosts.
        /// </summary>
        public virtual IHosts Hosts { get; private set; }

        /// <summary>
        /// Gets the IMatches.
        /// </summary>
        public virtual IMatches Matches { get; private set; }

        /// <summary>
        /// Gets the IOrientationReservations.
        /// </summary>
        public virtual IOrientationReservations OrientationReservations { get; private set; }

        /// <summary>
        /// Gets the IParentTypes.
        /// </summary>
        public virtual IParentTypes ParentTypes { get; private set; }

        /// <summary>
        /// Gets the IPerson.
        /// </summary>
        public virtual IPerson Person { get; private set; }

        /// <summary>
        /// Gets the IPostCertificationDeadlines.
        /// </summary>
        public virtual IPostCertificationDeadlines PostCertificationDeadlines { get; private set; }

        /// <summary>
        /// Gets the IProgramsOfInterest.
        /// </summary>
        public virtual IProgramsOfInterest ProgramsOfInterest { get; private set; }

        /// <summary>
        /// Gets the IProgramsOfStudy.
        /// </summary>
        public virtual IProgramsOfStudy ProgramsOfStudy { get; private set; }

        /// <summary>
        /// Gets the IRateTable.
        /// </summary>
        public virtual IRateTable RateTable { get; private set; }

        /// <summary>
        /// Gets the IRegistration.
        /// </summary>
        public virtual IRegistration Registration { get; private set; }

        /// <summary>
        /// Gets the IRegistrationAppointments.
        /// </summary>
        public virtual IRegistrationAppointments RegistrationAppointments { get; private set; }

        /// <summary>
        /// Gets the IReportAccess.
        /// </summary>
        public virtual IReportAccess ReportAccess { get; private set; }

        /// <summary>
        /// Gets the ISalutations.
        /// </summary>
        public virtual ISalutations Salutations { get; private set; }

        /// <summary>
        /// Gets the ISessionCodes.
        /// </summary>
        public virtual ISessionCodes SessionCodes { get; private set; }

        /// <summary>
        /// Gets the ISessionDates.
        /// </summary>
        public virtual ISessionDates SessionDates { get; private set; }

        /// <summary>
        /// Gets the ISpecialFeeCodes.
        /// </summary>
        public virtual ISpecialFeeCodes SpecialFeeCodes { get; private set; }

        /// <summary>
        /// Gets the IStates.
        /// </summary>
        public virtual IStates States { get; private set; }

        /// <summary>
        /// Gets the IStudent.
        /// </summary>
        public virtual IStudent Student { get; private set; }

        /// <summary>
        /// Gets the ISuffixes.
        /// </summary>
        public virtual ISuffixes Suffixes { get; private set; }

        /// <summary>
        /// Gets the ITerms.
        /// </summary>
        public virtual ITerms Terms { get; private set; }

        /// <summary>
        /// Gets the ITrainings.
        /// </summary>
        public virtual ITrainings Trainings { get; private set; }

        /// <summary>
        /// Gets the IUscDepartments.
        /// </summary>
        public virtual IUscDepartments UscDepartments { get; private set; }

        /// <summary>
        /// Gets the IUscLocations.
        /// </summary>
        public virtual IUscLocations UscLocations { get; private set; }

        /// <summary>
        /// Gets the IUscSchools.
        /// </summary>
        public virtual IUscSchools UscSchools { get; private set; }

        /// <summary>
        /// Gets the IWebAdmitApplications.
        /// </summary>
        public virtual IWebAdmitApplications WebAdmitApplications { get; private set; }

        /// <summary>
        /// Gets the IYears.
        /// </summary>
        public virtual IYears Years { get; private set; }

        /// <summary>
        /// Initializes a new instance of the PEApi class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public PEApi(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the PEApi class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public PEApi(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the PEApi class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public PEApi(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the PEApi class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public PEApi(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            Advancement = new Advancement(this);
            AgingRecords = new AgingRecords(this);
            AgingReports = new AgingReports(this);
            Applications = new Applications(this);
            Buildings = new Buildings(this);
            Bursar = new Bursar(this);
            CaoApps = new CaoApps(this);
            CertifiedStudents = new CertifiedStudents(this);
            Countries = new Countries(this);
            EducationModuleHolds = new EducationModuleHolds(this);
            EfcaQueueRecords = new EfcaQueueRecords(this);
            Email = new Email(this);
            Events = new Events(this);
            Explorers = new Explorers(this);
            HostOptions = new HostOptions(this);
            Hosts = new Hosts(this);
            Matches = new Matches(this);
            OrientationReservations = new OrientationReservations(this);
            ParentTypes = new ParentTypes(this);
            Person = new Person(this);
            PostCertificationDeadlines = new PostCertificationDeadlines(this);
            ProgramsOfInterest = new ProgramsOfInterest(this);
            ProgramsOfStudy = new ProgramsOfStudy(this);
            RateTable = new RateTable(this);
            Registration = new Registration(this);
            RegistrationAppointments = new RegistrationAppointments(this);
            ReportAccess = new ReportAccess(this);
            Salutations = new Salutations(this);
            SessionCodes = new SessionCodes(this);
            SessionDates = new SessionDates(this);
            SpecialFeeCodes = new SpecialFeeCodes(this);
            States = new States(this);
            Student = new Student(this);
            Suffixes = new Suffixes(this);
            Terms = new Terms(this);
            Trainings = new Trainings(this);
            UscDepartments = new UscDepartments(this);
            UscLocations = new UscLocations(this);
            UscSchools = new UscSchools(this);
            WebAdmitApplications = new WebAdmitApplications(this);
            Years = new Years(this);
            BaseUri = new System.Uri("http://oweb7-vm.usc.edu:80/PeApi");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
    }
}

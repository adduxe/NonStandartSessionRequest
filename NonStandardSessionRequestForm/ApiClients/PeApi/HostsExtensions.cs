// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PeApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Hosts.
    /// </summary>
    public static partial class HostsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeApplications'>
            /// </param>
            /// <param name='applicationYear'>
            /// </param>
            /// <param name='uscEventType'>
            /// </param>
            public static object Get(this IHosts operations, bool? includeApplications = default(bool?), string applicationYear = default(string), string uscEventType = default(string))
            {
                return operations.GetAsync(includeApplications, applicationYear, uscEventType).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeApplications'>
            /// </param>
            /// <param name='applicationYear'>
            /// </param>
            /// <param name='uscEventType'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this IHosts operations, bool? includeApplications = default(bool?), string applicationYear = default(string), string uscEventType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(includeApplications, applicationYear, uscEventType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uscId'>
            /// </param>
            /// <param name='includeApplications'>
            /// </param>
            /// <param name='applicationYear'>
            /// </param>
            public static object Get1(this IHosts operations, string uscId, bool? includeApplications = default(bool?), string applicationYear = default(string))
            {
                return operations.Get1Async(uscId, includeApplications, applicationYear).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uscId'>
            /// </param>
            /// <param name='includeApplications'>
            /// </param>
            /// <param name='applicationYear'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Get1Async(this IHosts operations, string uscId, bool? includeApplications = default(bool?), string applicationYear = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get1WithHttpMessagesAsync(uscId, includeApplications, applicationYear, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

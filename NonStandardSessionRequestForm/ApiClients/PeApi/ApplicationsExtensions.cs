// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PeApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Applications.
    /// </summary>
    public static partial class ApplicationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='uscId'>
            /// </param>
            /// <param name='year'>
            /// </param>
            public static object Get(this IApplications operations, double? applicationId = default(double?), string uscId = default(string), string year = default(string))
            {
                return operations.GetAsync(applicationId, uscId, year).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='uscId'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this IApplications operations, double? applicationId = default(double?), string uscId = default(string), string year = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(applicationId, uscId, year, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uscId'>
            /// </param>
            /// <param name='application'>
            /// </param>
            public static object Put(this IApplications operations, string uscId, USCPEApiDTOExploreHostingApplication application)
            {
                return operations.PutAsync(uscId, application).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uscId'>
            /// </param>
            /// <param name='application'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutAsync(this IApplications operations, string uscId, USCPEApiDTOExploreHostingApplication application, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutWithHttpMessagesAsync(uscId, application, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uscId'>
            /// </param>
            /// <param name='application'>
            /// </param>
            public static object Post(this IApplications operations, string uscId, USCPEApiDTOExploreHostingApplication application)
            {
                return operations.PostAsync(uscId, application).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uscId'>
            /// </param>
            /// <param name='application'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostAsync(this IApplications operations, string uscId, USCPEApiDTOExploreHostingApplication application, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(uscId, application, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uscId'>
            /// </param>
            /// <param name='application'>
            /// </param>
            public static object Patch(this IApplications operations, string uscId, USCPEApiDTOExploreHostingApplication application)
            {
                return operations.PatchAsync(uscId, application).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uscId'>
            /// </param>
            /// <param name='application'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PatchAsync(this IApplications operations, string uscId, USCPEApiDTOExploreHostingApplication application, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWithHttpMessagesAsync(uscId, application, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

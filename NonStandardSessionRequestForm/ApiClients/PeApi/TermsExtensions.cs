// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PeApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Terms.
    /// </summary>
    public static partial class TermsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<USCPEApiDTOCommencementBookTerm> TERM(this ITerms operations)
            {
                return operations.TERMAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<USCPEApiDTOCommencementBookTerm>> TERMAsync(this ITerms operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TERMWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static USCPEApiDTOCommencementBookTerm TERM1(this ITerms operations, string id)
            {
                return operations.TERM1Async(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USCPEApiDTOCommencementBookTerm> TERM1Async(this ITerms operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TERM1WithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string GetCurrentTerm(this ITerms operations)
            {
                return operations.GetCurrentTermAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetCurrentTermAsync(this ITerms operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentTermWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inputDate'>
            /// </param>
            public static string GetTerm(this ITerms operations, System.DateTime inputDate)
            {
                return operations.GetTermAsync(inputDate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inputDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetTermAsync(this ITerms operations, System.DateTime inputDate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTermWithHttpMessagesAsync(inputDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
